module test (
o,
a,
b,
);
wire  _LOGIC0;
wire  _LOGIC1;
wire [1:0] _ivl_11;
wire [1:0] _ivl_12;
wire  _ivl_15;
wire [1:0] _ivl_17;
wire  _ivl_19;
wire [1:0] _ivl_21;
wire [1:0] _ivl_4;
wire  _ivl_7;
wire [1:0] _ivl_8;
input [1:0] a;
input [1:0] b;
output [1:0] o;
assign _ivl_12 = 2'bz1;
assign _ivl_4 = 2'bz0;
assign _ivl_8 = 2'b11;
pullup (_LOGIC1);
pulldown (_LOGIC0);
or (_ivl_19, _ivl_15, _ivl_7);
pulldown (_ivl_21[0]);
pulldown (_ivl_21[1]);
// ivl_cmpeqz #(2) cmpeqz0 (_ivl_7, a, _ivl_4); // line no 1
// mux starts line no 1
ivl_mux mux10 (_ivl_11[0], _ivl_21[0], _ivl_8[0], _ivl_7);
ivl_mux mux11 (_ivl_11[1], _ivl_21[1], _ivl_8[1], _ivl_7);
// mux ends line no 1
// ivl_cmpeqz #(2) cmpeqz2 (_ivl_15, a, _ivl_12); // line no 1
// mux starts line no 1
ivl_mux mux30 (_ivl_17[0], _ivl_11[0], b[0], _ivl_15);
ivl_mux mux31 (_ivl_17[1], _ivl_11[1], b[1], _ivl_15);
// mux ends line no 1
// latch starts line no 5
ivl_dlat dlat40 (o[0], _ivl_17[0], _ivl_19);
ivl_dlat dlat41 (o[1], _ivl_17[1], _ivl_19);
// latch ends line no 5
endmodule
module ivl_mux (out, in0, in1, select);
  output out;
  input in0, in1, select;
  assign out = select ? in1 : in0;
endmodule
module ivl_dlat (out, in, clock);
  output out;
  reg out;
  input in, clock;
  always @*
    if (clock)
      out = in;
endmodule
